     1                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     2                                  ;assemble and link with 
     3                                  ;assemble: -->> nasm -f win64 -o modelo02.o modelo02.asm -l modelo02.lst
     4                                  ;link:	   -->> gcc -o modelo02 modelo02.o
     5                                  ;run:      -->> modelo02
     6                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     7                                  ;-----------------------------------------
     8                                  
     9                                  ;file: modelo02.asm (nombre programa)
    10                                  
    11                                  extern printf, scanf		
    12                                  
    13                                  segment .data
    14                                  ;aqui se declaran variables inicializadas
    15 00000000 0C000000E7FFFFFF0E-     a dd 12,-25,14,-84,99	
    15 00000009 000000ACFFFFFF6300-
    15 00000012 0000               
    16 00000014 03000000                k dd 3	
    17                                  segment .bss
    18                                  ;Block Started by Symbol(BSS) 
    19                                  ;aqui van las variables declaradas pero sin inicializar
    20 00000000 <res 00000014>          b resd 5
    21                                  segment .text 
    22                                  
    23                                  global main 					
    24                                  main:	
    25                                  ;etiqueta que indica el comienzo del programa principal
    26                                  ;aqui van las instrucciones
    27                                  ;Base+ indice
    28                                  ;[registroBase(rbx,rbp)+registro indices (rsi,rdi));
    29                                  
    30 00000000 4831DB                  xor rbx,rbx
    31 00000003 4831F6                  xor rsi,rsi ;indice
    32 00000006 4D31E4                  xor r12,r12
    33 00000009 49BC-                   mov r12,a ; registro de direccion de vector
    33 0000000B [0000000000000000] 
    34 00000013 48BB-                   mov rbx,b 
    34 00000015 [0000000000000000] 
    35 0000001D B905000000              mov rcx,5
    36                                  ciclo:
    37 00000022 418B0434                	mov eax,[r12+rsi];extraemos elemento
    38 00000026 99                      	cdq ;dividir
    39 00000027 F73C25[14000000]        	IDIV dword[k] ; eax: cociente  edx residuo ;; byte = al ah
    40 0000002E 890433                  	mov [rbx+rsi],eax
    41 00000031 4883C604                	add rsi,4 ;Incrementamos indice
    42 00000035 E2EB                    loop ciclo
    43                                  
    44 00000037 C3                      ret
    45                                  ;---------------------------------------
    46                                  ;..........subrutinas....................	
    47                                  
    48                                  
    49                                  
