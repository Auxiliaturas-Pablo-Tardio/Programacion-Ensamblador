     1                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     2                                  ;assemble and link with 
     3                                  ;assemble: -->> nasm -f win64 -o modelo02.o modelo02.asm -l modelo02.lst
     4                                  ;link:	   -->> gcc -o modelo02 modelo02.o
     5                                  ;run:      -->> modelo02
     6                                  ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     7                                  ;-----------------------------------------
     8                                  
     9                                  ;file: modelo02.asm (nombre programa)
    10                                  
    11                                  extern printf, scanf,strlen,gets		
    12                                  
    13                                  segment .data
    14                                  ;aqui se declaran variables inicializadas
    15 00000000 496E67726573617220-     m1 db "Ingresar la cadena de caracteres (maximo 100 caracteres)",0
    15 00000009 6C6120636164656E61-
    15 00000012 206465206361726163-
    15 0000001B 746572657320286D61-
    15 00000024 78696D6F2031303020-
    15 0000002D 636172616374657265-
    15 00000036 732900             
    16 00000039 6C6120636164656E61-     m2 db "la cadena tiene un total de %lld :(digitos +letras mayusculas+letras minusculas)",0
    16 00000042 207469656E6520756E-
    16 0000004B 20746F74616C206465-
    16 00000054 20256C6C64203A2864-
    16 0000005D 696769746F73202B6C-
    16 00000066 6574726173206D6179-
    16 0000006F 757363756C61732B6C-
    16 00000078 6574726173206D696E-
    16 00000081 757363756C61732900 
    17 0000008A 257300                  fmt db "%s",0	
    18                                  segment .bss
    19                                  ;Block Started by Symbol(BSS) 
    20                                  ;aqui van las variables declaradas pero sin inicializar
    21 00000000 <res 00000064>          cad resb 100
    22                                  
    23                                  segment .text 
    24                                  
    25                                  global main 					
    26                                  main:	
    27                                  ;etiqueta que indica el comienzo del programa principal
    28                                  ;aqui van las instrucciones
    29                                  
    30 00000000 4883EC20                sub rsp,32 ; espacio sombra
    31 00000004 48B9-                   	mov rcx,m1
    31 00000006 [0000000000000000] 
    32 0000000E E8(00000000)            	call printf
    33 00000013 4883C420                add rsp,32 ;
    34                                  
    35                                  ; escanear el mensaje
    36                                  
    37 00000017 4883EC20                sub rsp,32
    38                                  
    39 0000001B 48B9-                   	mov rcx,cad
    39 0000001D [0000000000000000] 
    40 00000025 E8(00000000)            	call gets
    41 0000002A 4883C420                add rsp,32
    42                                  
    43 0000002E 4883EC20                sub rsp,32
    44 00000032 48B9-                   	mov rcx,cad
    44 00000034 [0000000000000000] 
    45 0000003C E8(00000000)            	call strlen ; rax lenth de la cadena
    46 00000041 4883C420                add rsp,32
    47                                  
    48 00000045 4883EC20                sub rsp,32
    49 00000049 48B9-                   	mov rcx,cad
    49 0000004B [0000000000000000] 
    50 00000053 4889C2                  	mov rdx,rax
    51 00000056 E81F000000              	call contar
    52 0000005B 4883C420                add rsp,32
    53                                  ; Rax 
    54                                  
    55 0000005F 4883EC20                sub rsp,32
    56 00000063 48B9-                   	mov rcx,m2
    56 00000065 [3900000000000000] 
    57 0000006D 4889C2                  	mov rdx,rax
    58 00000070 E8(00000000)            	call printf
    59 00000075 4883C420                add rsp,32
    60                                  	
    61 00000079 C3                      ret
    62                                  ;---------------------------------------
    63                                  ;..........subrutinas....................	
    64                                  contar:
    65 0000007A 48894C2408              	mov [rsp+8],rcx  ; primer par
    66 0000007F 4889542410              	mov [rsp+16],rdx ; segundo par
    67                                  	
    68 00000084 488B4C2410              	mov rcx, [rsp+16]
    69 00000089 4C8B642408              	mov r12, [rsp+8] ;direccion de la cadena
    70 0000008E 4D31FF                  	xor r15,r15
    71                                  	ciclo:
    72 00000091 51                      	push rcx
    73                                  		;extraer el caracter actual
    74 00000092 458A2C24                		mov r13b,[r12] 
    75                                  		; es numero?
    76 00000096 4883EC20                		sub rsp,32
    77 0000009A B930000000              			mov rcx,0x30
    78 0000009F BA39000000              			mov rdx,0x39
    79 000000A4 4D0FB6C5                			movzx r8,r13b
    80 000000A8 E85B000000              			CALL isCarEnRango
    81 000000AD 4883C420                		add rsp,32
    82                                  		;Preguntar si es true o false
    83 000000B1 4883F801                		cmp rax,1
    84 000000B5 7444                    		JE contarChar
    85                                  		
    86                                  		; es mayuscula?
    87 000000B7 4883EC20                		sub rsp,32
    88 000000BB B941000000              			mov rcx,0x41
    89 000000C0 BA5A000000              			mov rdx,0x5A
    90 000000C5 4D0FB6C5                			movzx r8,r13b 
    91 000000C9 E83A000000              			CALL isCarEnRango
    92 000000CE 4883C420                		add rsp,32
    93                                  		;Preguntar si es true o false
    94 000000D2 4883F801                		cmp rax,1
    95 000000D6 7423                    		JE contarChar
    96                                  		
    97                                  		; es minuscula?
    98 000000D8 4883EC20                		sub rsp,32
    99 000000DC B961000000              			mov rcx,0x61
   100 000000E1 BA7A000000              			mov rdx,0x7A
   101 000000E6 4D0FB6C5                			movzx r8,r13b 
   102 000000EA E819000000              			CALL isCarEnRango
   103 000000EF 4883C420                		add rsp,32
   104                                  		;Preguntar si es true o false
   105 000000F3 4883F801                		cmp rax,1
   106 000000F7 7402                    		JE contarChar
   107                                  		; no es ninguno
   108 000000F9 EB03                    		JMP noEntrar
   109                                  		contarChar:
   110 000000FB 49FFC7                  		inc r15
   111                                  		noEntrar:
   112                                  		
   113                                  		
   114                                  		
   115 000000FE 49FFC4                  	inc r12
   116 00000101 59                      	pop rcx
   117 00000102 E28D                    	loop ciclo
   118                                  	
   119 00000104 4C89F8                  mov rax, r15
   120                                  	
   121 00000107 C3                      ret
   122                                  
   123                                  isCarEnRango:
   124 00000108 48894C2408              mov [rsp+8],rcx  ; primer par - rango de inicio
   125 0000010D 4889542410              mov [rsp+16],rdx ; segun par - rango de fin
   126 00000112 4C89442418              mov [rsp+24],r8 ; tercer par-  caracter a detectar
   127                                  
   128                                  ; if  car es mayor que mi rango de inicio
   129                                  
   130 00000117 48394C2418              cmp [rsp+24],rcx
   131 0000011C 7D02                    JGE estaCasiDentro
   132 0000011E EB10                    JMP noEsta
   133                                  estaCasiDentro:
   134 00000120 4839542418              CMP [rsp+24],rdx
   135 00000125 7E02                    JLE cumpleRango
   136 00000127 EB07                    JMP noEsta
   137                                  
   138                                  cumpleRango:
   139 00000129 B801000000              mov rax,1
   140 0000012E EB05                    JMP finRango
   141                                  noEsta:
   142 00000130 B800000000              mov rax,0
   143                                  finRango:
   144 00000135 C3                      ret
   145                                  
